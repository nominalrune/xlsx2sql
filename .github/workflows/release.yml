name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            binary_name: xlsx2sql.exe
            archive_name: xlsx2sql-windows-x64
          - target: x86_64-apple-darwin
            os: macos-latest
            binary_name: xlsx2sql
            archive_name: xlsx2sql-macos-intel
          - target: aarch64-apple-darwin
            os: macos-latest
            binary_name: xlsx2sql
            archive_name: xlsx2sql-macos-arm64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: xlsx2sql
            archive_name: xlsx2sql-linux-x64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools (Windows)
      if: matrix.target == 'x86_64-pc-windows-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64-x86-64

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Create entitlements file for macOS
      if: contains(matrix.target, 'apple-darwin')
      run: |
        cat > entitlements.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>com.apple.security.cs.allow-jit</key>
            <false/>
            <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
            <false/>
            <key>com.apple.security.cs.disable-library-validation</key>
            <false/>
            <key>com.apple.security.cs.allow-dyld-environment-variables</key>
            <false/>
        </dict>
        </plist>
        EOF

    - name: Code sign macOS binary
      if: contains(matrix.target, 'apple-darwin') && env.APPLE_SIGNING_IDENTITY != ''
      env:
        APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APPLE_USERNAME: ${{ secrets.APPLE_USERNAME }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      run: |
        # Import certificate
        echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
        security create-keychain -p temp_password build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p temp_password build.keychain
        security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k temp_password build.keychain
        
        # Sign the binary
        codesign --force --options runtime --entitlements entitlements.plist --sign "$APPLE_SIGNING_IDENTITY" target/${{ matrix.target }}/release/${{ matrix.binary_name }}
        
        # Verify signature
        codesign -dv target/${{ matrix.target }}/release/${{ matrix.binary_name }}

    - name: Create archive (Windows)
      if: matrix.target == 'x86_64-pc-windows-gnu'
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} dist/
        cp README.md dist/ || echo "README.md not found"
        cp LICENSE dist/ || echo "LICENSE not found"
        cd dist
        zip -r ../${{ matrix.archive_name }}.zip .
        cd ..

    - name: Create archive (Unix)
      if: matrix.target != 'x86_64-pc-windows-gnu'
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} dist/
        cp README.md dist/ || echo "README.md not found"
        cp LICENSE dist/ || echo "LICENSE not found"
        cd dist
        tar -czf ../${{ matrix.archive_name }}.tar.gz .
        cd ..

    - name: Notarize macOS binary
      if: contains(matrix.target, 'apple-darwin') && env.APPLE_USERNAME != ''
      env:
        APPLE_USERNAME: ${{ secrets.APPLE_USERNAME }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        # Create a zip for notarization
        ditto -c -k --keepParent target/${{ matrix.target }}/release/${{ matrix.binary_name }} notarize.zip
        
        # Submit for notarization
        xcrun notarytool submit notarize.zip --apple-id "$APPLE_USERNAME" --password "$APPLE_PASSWORD" --team-id "$APPLE_TEAM_ID" --wait
        
        # Staple the notarization
        xcrun stapler staple target/${{ matrix.target }}/release/${{ matrix.binary_name }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.archive_name }}
        path: |
          ${{ matrix.archive_name }}.zip
          ${{ matrix.archive_name }}.tar.gz
        if-no-files-found: ignore

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: List downloaded files
      run: find . -name "*.zip" -o -name "*.tar.gz" | sort

    - name: Create Release with gh CLI
      run: |
        gh release create ${{ github.ref_name }} \
          --title "xlsx2sql ${{ github.ref_name }}" \
          --generate-notes \
          --notes "## Installation on macOS

        **For unsigned binaries**: If you get a security warning on macOS, you can bypass it by:
        1. Right-click the binary → Open → Open anyway
        2. Or run: \`xattr -d com.apple.quarantine xlsx2sql\`
        3. Or run: \`spctl --add --label 'xlsx2sql' xlsx2sql\`

        **Usage:**
        \`\`\`bash
        ./xlsx2sql input.xlsx           # Creates input.sql
        ./xlsx2sql input.xlsx -o output.sql
        \`\`\`" \
          ./xlsx2sql-windows-x64/xlsx2sql-windows-x64.zip \
          ./xlsx2sql-macos-intel/xlsx2sql-macos-intel.tar.gz \
          ./xlsx2sql-macos-arm64/xlsx2sql-macos-arm64.tar.gz \
          ./xlsx2sql-linux-x64/xlsx2sql-linux-x64.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
